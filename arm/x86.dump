
main.o:     file format elf32-i386


Disassembly of section .text:

00000000 <pointers1>:
#include <stdlib.h>
#include <stddef.h>

//------------------------------------------------------------------------------

void pointers1( void ) {
   0:	55                   	push   ebp
   1:	89 e5                	mov    ebp,esp
   3:	83 ec 30             	sub    esp,0x30
   6:	e8 fc ff ff ff       	call   7 <pointers1+0x7>
   b:	05 01 00 00 00       	add    eax,0x1

   int a = 0;
  10:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   int b = 0;
  17:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0

   unsigned int addressX = 0;
  1e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   unsigned int addressY = 0;
  25:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0

   char ar[] = "vwxyz";
  2c:	c7 45 da 76 77 78 79 	mov    DWORD PTR [ebp-0x26],0x79787776
  33:	66 c7 45 de 7a 00    	mov    WORD PTR [ebp-0x22],0x7a
   int  *pi;
   int* piA = NULL;
  39:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   int* piB = NULL;
  40:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0

   pi = 0;
  47:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   pi = '\0';
  4e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   pi = NULL;
  55:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0

   pi  = &a;
  5c:	8d 45 e0             	lea    eax,[ebp-0x20]
  5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *pi = 3;
  62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
  65:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3

   addressX = &a;
  6b:	8d 45 e0             	lea    eax,[ebp-0x20]
  6e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   addressY = pi;
  71:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
  74:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax

   a = 5;
  77:	c7 45 e0 05 00 00 00 	mov    DWORD PTR [ebp-0x20],0x5
   b = *pi;
  7e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
  81:	8b 00                	mov    eax,DWORD PTR [eax]
  83:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax

   pi++;
  86:	83 45 e8 04          	add    DWORD PTR [ebp-0x18],0x4
   *pi = 7;
  8a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
  8d:	c7 00 07 00 00 00    	mov    DWORD PTR [eax],0x7

   pi  = ar;
  93:	8d 45 da             	lea    eax,[ebp-0x26]
  96:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *pi = 1684234849;
  99:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
  9c:	c7 00 61 62 63 64    	mov    DWORD PTR [eax],0x64636261

   a   = 3;
  a2:	c7 45 e0 03 00 00 00 	mov    DWORD PTR [ebp-0x20],0x3
   piA = &a;
  a9:	8d 45 e0             	lea    eax,[ebp-0x20]
  ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   piB = &a;
  af:	8d 45 e0             	lea    eax,[ebp-0x20]
  b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax

   int c = 0;
  b5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   c = *piA;
  bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
  bf:	8b 00                	mov    eax,DWORD PTR [eax]
  c1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   c = *piB;
  c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
  c7:	8b 00                	mov    eax,DWORD PTR [eax]
  c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax

   c = 4;
  cc:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   *piB = c;
  d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
  d6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
  d9:	89 10                	mov    DWORD PTR [eax],edx
   c = a + *piA + *piB;
  db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
  de:	8b 10                	mov    edx,DWORD PTR [eax]
  e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
  e3:	01 c2                	add    edx,eax
  e5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
  e8:	8b 00                	mov    eax,DWORD PTR [eax]
  ea:	01 d0                	add    eax,edx
  ec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax

   char d[] = "efgh";
  ef:	c7 45 d5 65 66 67 68 	mov    DWORD PTR [ebp-0x2b],0x68676665
  f6:	c6 45 d9 00          	mov    BYTE PTR [ebp-0x27],0x0
   *pi = *(int*)d;
  fa:	8d 45 d5             	lea    eax,[ebp-0x2b]
  fd:	8b 10                	mov    edx,DWORD PTR [eax]
  ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 102:	89 10                	mov    DWORD PTR [eax],edx

}//pointers1
 104:	90                   	nop
 105:	c9                   	leave  
 106:	c3                   	ret    

00000107 <pointers2>:

//-----------------------------------------------------------------------------

void pointers2( void ) {
 107:	55                   	push   ebp
 108:	89 e5                	mov    ebp,esp
 10a:	83 ec 30             	sub    esp,0x30
 10d:	e8 fc ff ff ff       	call   10e <pointers2+0x7>
 112:	05 01 00 00 00       	add    eax,0x1

   int a = 0;
 117:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   int b = 0;
 11e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   int c = 0;
 125:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   int d = 0;
 12c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   int e = 0;
 133:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0

   int* pi  = NULL;
 13a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0

   int arr[] = { 0, 0, 0, 0, 0 };
 141:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
 148:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
 14f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
 156:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
 15d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0

   pi = &arr[0];
 164:	8d 45 d4             	lea    eax,[ebp-0x2c]
 167:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *pi = 15;
 16a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 16d:	c7 00 0f 00 00 00    	mov    DWORD PTR [eax],0xf

   pi = pi + 1;
 173:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 176:	83 c0 04             	add    eax,0x4
 179:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *pi = 20;
 17c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 17f:	c7 00 14 00 00 00    	mov    DWORD PTR [eax],0x14

   pi += 1;
 185:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 188:	83 c0 04             	add    eax,0x4
 18b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *pi = 25;
 18e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 191:	c7 00 19 00 00 00    	mov    DWORD PTR [eax],0x19

   pi++;
 197:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 19a:	83 c0 04             	add    eax,0x4
 19d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *pi = 30;
 1a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 1a3:	c7 00 1e 00 00 00    	mov    DWORD PTR [eax],0x1e

   *pi++ = 35;
 1a9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 1ac:	8d 50 04             	lea    edx,[eax+0x4]
 1af:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
 1b2:	c7 00 23 00 00 00    	mov    DWORD PTR [eax],0x23

   *pi = 40;
 1b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 1bb:	c7 00 28 00 00 00    	mov    DWORD PTR [eax],0x28

   arr[0] = arr[1] = arr[2] = arr[3] = arr[4] = 0;
 1c1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
 1c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
 1cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
 1ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
 1d1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
 1d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
 1d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
 1da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
 1dd:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax

   pi = &arr[0];
 1e0:	8d 45 d4             	lea    eax,[ebp-0x2c]
 1e3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   *(pi + 0) = 2;
 1e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 1e9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
   *(pi + 1) = 4;
 1ef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 1f2:	83 c0 04             	add    eax,0x4
 1f5:	c7 00 04 00 00 00    	mov    DWORD PTR [eax],0x4
   *(pi + 2) = 6;
 1fb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 1fe:	83 c0 08             	add    eax,0x8
 201:	c7 00 06 00 00 00    	mov    DWORD PTR [eax],0x6
   *(pi + 3) = 8;
 207:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 20a:	83 c0 0c             	add    eax,0xc
 20d:	c7 00 08 00 00 00    	mov    DWORD PTR [eax],0x8
   *(pi + 4) = 10;
 213:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 216:	83 c0 10             	add    eax,0x10
 219:	c7 00 0a 00 00 00    	mov    DWORD PTR [eax],0xa

   arr[0] = arr[1] = arr[2] = arr[3] = arr[4] = 0;
 21f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
 226:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
 229:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
 22c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
 22f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
 232:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
 235:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
 238:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
 23b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax

   pi = &arr[0];
 23e:	8d 45 d4             	lea    eax,[ebp-0x2c]
 241:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   pi[0] = 3;
 244:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 247:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
   pi[1] = 5;
 24d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 250:	83 c0 04             	add    eax,0x4
 253:	c7 00 05 00 00 00    	mov    DWORD PTR [eax],0x5
   pi[2] = 7;
 259:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 25c:	83 c0 08             	add    eax,0x8
 25f:	c7 00 07 00 00 00    	mov    DWORD PTR [eax],0x7
   pi[3] = 9;
 265:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 268:	83 c0 0c             	add    eax,0xc
 26b:	c7 00 09 00 00 00    	mov    DWORD PTR [eax],0x9
   pi[4] = 11;
 271:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 274:	83 c0 10             	add    eax,0x10
 277:	c7 00 0b 00 00 00    	mov    DWORD PTR [eax],0xb

   arr[0] = arr[1] = arr[2] = arr[3] = arr[4] = 0;
 27d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
 284:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
 287:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
 28a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
 28d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
 290:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
 293:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
 296:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
 299:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax

   *arr = 111;
 29c:	c7 45 d4 6f 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x6f
   *(arr + 0) = 100;
 2a3:	c7 45 d4 64 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x64
   *(arr + 1) = 200;
 2aa:	c7 45 d8 c8 00 00 00 	mov    DWORD PTR [ebp-0x28],0xc8
   *(arr + 2) = 300;
 2b1:	c7 45 dc 2c 01 00 00 	mov    DWORD PTR [ebp-0x24],0x12c
   *(arr + 3) = 400;
 2b8:	c7 45 e0 90 01 00 00 	mov    DWORD PTR [ebp-0x20],0x190
   *(arr + 4) = 500;
 2bf:	c7 45 e4 f4 01 00 00 	mov    DWORD PTR [ebp-0x1c],0x1f4


   pi = &arr[4];
 2c6:	8d 45 d4             	lea    eax,[ebp-0x2c]
 2c9:	83 c0 10             	add    eax,0x10
 2cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   pi[-4] = 10;
 2cf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 2d2:	83 e8 10             	sub    eax,0x10
 2d5:	c7 00 0a 00 00 00    	mov    DWORD PTR [eax],0xa
   pi[-3] = 20;
 2db:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 2de:	83 e8 0c             	sub    eax,0xc
 2e1:	c7 00 14 00 00 00    	mov    DWORD PTR [eax],0x14
   pi[-2] = 30;
 2e7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 2ea:	83 e8 08             	sub    eax,0x8
 2ed:	c7 00 1e 00 00 00    	mov    DWORD PTR [eax],0x1e
   pi[-1] = 40;
 2f3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 2f6:	83 e8 04             	sub    eax,0x4
 2f9:	c7 00 28 00 00 00    	mov    DWORD PTR [eax],0x28
   pi[ 0] = 50;
 2ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 302:	c7 00 32 00 00 00    	mov    DWORD PTR [eax],0x32


   pi = &c;
 308:	8d 45 ec             	lea    eax,[ebp-0x14]
 30b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax

   // !! danger
   *(pi - 1) = 22;
 30e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 311:	83 e8 04             	sub    eax,0x4
 314:	c7 00 16 00 00 00    	mov    DWORD PTR [eax],0x16
   *(pi - 2) = 11;
 31a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 31d:	83 e8 08             	sub    eax,0x8
 320:	c7 00 0b 00 00 00    	mov    DWORD PTR [eax],0xb

   *(pi + 1) = 44;
 326:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 329:	83 c0 04             	add    eax,0x4
 32c:	c7 00 2c 00 00 00    	mov    DWORD PTR [eax],0x2c
   *(pi + 2) = 55;
 332:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 335:	83 c0 08             	add    eax,0x8
 338:	c7 00 37 00 00 00    	mov    DWORD PTR [eax],0x37

   *(pi + 3) = 66;
 33e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 341:	83 c0 0c             	add    eax,0xc
 344:	c7 00 42 00 00 00    	mov    DWORD PTR [eax],0x42
   *(pi + 4) = 77;
 34a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 34d:	83 c0 10             	add    eax,0x10
 350:	c7 00 4d 00 00 00    	mov    DWORD PTR [eax],0x4d

   a = b = c = d = e;
 356:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 359:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 35c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 35f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
 362:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
 365:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
 368:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
 36b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax

   pi = (int*)&pi;
 36e:	8d 45 e8             	lea    eax,[ebp-0x18]
 371:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax

   // !! danger
   pi[-1] = 8;
 374:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 377:	83 e8 04             	sub    eax,0x4
 37a:	c7 00 08 00 00 00    	mov    DWORD PTR [eax],0x8
   pi[-2] = 7;
 380:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 383:	83 e8 08             	sub    eax,0x8
 386:	c7 00 07 00 00 00    	mov    DWORD PTR [eax],0x7
   pi[-3] = 6;
 38c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 38f:	83 e8 0c             	sub    eax,0xc
 392:	c7 00 06 00 00 00    	mov    DWORD PTR [eax],0x6
   pi[-4] = 5;
 398:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 39b:	83 e8 10             	sub    eax,0x10
 39e:	c7 00 05 00 00 00    	mov    DWORD PTR [eax],0x5
   pi[-5] = 4;
 3a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 3a7:	83 e8 14             	sub    eax,0x14
 3aa:	c7 00 04 00 00 00    	mov    DWORD PTR [eax],0x4

   arr[0] = arr[1] = arr[2] = arr[3] = arr[4] = 0;
 3b0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
 3b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
 3ba:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
 3bd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
 3c0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
 3c3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
 3c6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
 3c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
 3cc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax

   0[arr] = 7;
 3cf:	c7 45 d4 07 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x7
   1[arr] = 6;
 3d6:	c7 45 d8 06 00 00 00 	mov    DWORD PTR [ebp-0x28],0x6
   2[arr] = 5;
 3dd:	c7 45 dc 05 00 00 00 	mov    DWORD PTR [ebp-0x24],0x5
   3[arr] = 4;
 3e4:	c7 45 e0 04 00 00 00 	mov    DWORD PTR [ebp-0x20],0x4
   4[arr] = 2;
 3eb:	c7 45 e4 02 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x2

   // http://www.youtube.com/watch?v=IJNR2EpS0jw
   *(pi + 5) = 88;
 3f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 3f5:	83 c0 14             	add    eax,0x14
 3f8:	c7 00 58 00 00 00    	mov    DWORD PTR [eax],0x58
   *(pi + 6) = 99;
 3fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 401:	83 c0 18             	add    eax,0x18
 404:	c7 00 63 00 00 00    	mov    DWORD PTR [eax],0x63

}//pointers2
 40a:	90                   	nop
 40b:	c9                   	leave  
 40c:	c3                   	ret    

0000040d <pointers3>:

//-----------------------------------------------------------------------------

void pointers3( void ) {
 40d:	55                   	push   ebp
 40e:	89 e5                	mov    ebp,esp
 410:	83 ec 10             	sub    esp,0x10
 413:	e8 fc ff ff ff       	call   414 <pointers3+0x7>
 418:	05 01 00 00 00       	add    eax,0x1

	// see disassembly
	int    a =  3;
 41d:	c7 45 f8 03 00 00 00 	mov    DWORD PTR [ebp-0x8],0x3
	int   *b = &a;
 424:	8d 45 f8             	lea    eax,[ebp-0x8]
 427:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
	int  **c = &b;
 42a:	8d 45 f4             	lea    eax,[ebp-0xc]
 42d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
	int ***d = &c;
 430:	8d 45 f0             	lea    eax,[ebp-0x10]
 433:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax

	   a = 2;
 436:	c7 45 f8 02 00 00 00 	mov    DWORD PTR [ebp-0x8],0x2
	  *b = 3;
 43d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 440:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
     **c = 4;
 446:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 449:	8b 00                	mov    eax,DWORD PTR [eax]
 44b:	c7 00 04 00 00 00    	mov    DWORD PTR [eax],0x4
	***d = 5;
 451:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 454:	8b 00                	mov    eax,DWORD PTR [eax]
 456:	8b 00                	mov    eax,DWORD PTR [eax]
 458:	c7 00 05 00 00 00    	mov    DWORD PTR [eax],0x5

}//pointers3
 45e:	90                   	nop
 45f:	c9                   	leave  
 460:	c3                   	ret    

00000461 <pointers4>:

//------------------------------------------------------------------------------

void pointers4( void ) {
 461:	55                   	push   ebp
 462:	89 e5                	mov    ebp,esp
 464:	83 ec 70             	sub    esp,0x70
 467:	e8 fc ff ff ff       	call   468 <pointers4+0x7>
 46c:	05 01 00 00 00       	add    eax,0x1

   // see disassembly
   int arrI[ 5 ] = { 10, 20, 30, 40, 50 };
 471:	c7 45 d4 0a 00 00 00 	mov    DWORD PTR [ebp-0x2c],0xa
 478:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
 47f:	c7 45 dc 1e 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1e
 486:	c7 45 e0 28 00 00 00 	mov    DWORD PTR [ebp-0x20],0x28
 48d:	c7 45 e4 32 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x32

   int *piA = NULL;
 494:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   int *piB = NULL;
 49b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0

   long double arrLD[ 5 ] = { .10L, .20L, .30L, .40L, .50L };
 4a2:	db a8 00 00 00 00    	fld    TBYTE PTR [eax+0x0]
 4a8:	db 7d 90             	fstp   TBYTE PTR [ebp-0x70]
 4ab:	db a8 10 00 00 00    	fld    TBYTE PTR [eax+0x10]
 4b1:	db 7d 9c             	fstp   TBYTE PTR [ebp-0x64]
 4b4:	db a8 20 00 00 00    	fld    TBYTE PTR [eax+0x20]
 4ba:	db 7d a8             	fstp   TBYTE PTR [ebp-0x58]
 4bd:	db a8 30 00 00 00    	fld    TBYTE PTR [eax+0x30]
 4c3:	db 7d b4             	fstp   TBYTE PTR [ebp-0x4c]
 4c6:	db a8 40 00 00 00    	fld    TBYTE PTR [eax+0x40]
 4cc:	db 7d c0             	fstp   TBYTE PTR [ebp-0x40]

   long double *pldA = NULL;
 4cf:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   long double *pldB = NULL;
 4d6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0

   size_t        size = 0;
 4dd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   ptrdiff_t distance = 0;
 4e4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0

   piA = &arrI[ 0 ];
 4eb:	8d 45 d4             	lea    eax,[ebp-0x2c]
 4ee:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
   piB = &arrI[ 1 ];
 4f1:	8d 45 d4             	lea    eax,[ebp-0x2c]
 4f4:	83 c0 04             	add    eax,0x4
 4f7:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax

   size = sizeof( int );
 4fa:	c7 45 ec 04 00 00 00 	mov    DWORD PTR [ebp-0x14],0x4
   distance = piA - piB;
 501:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 504:	2b 45 f8             	sub    eax,DWORD PTR [ebp-0x8]
 507:	c1 f8 02             	sar    eax,0x2
 50a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax


   pldA = &arrLD[ 0 ];
 50d:	8d 45 90             	lea    eax,[ebp-0x70]
 510:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   pldB = &arrLD[ 1 ];
 513:	8d 45 90             	lea    eax,[ebp-0x70]
 516:	83 c0 0c             	add    eax,0xc
 519:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax

   size = sizeof( long double );
 51c:	c7 45 ec 0c 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc
   distance = pldA - pldB;
 523:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 526:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
 529:	c1 f8 02             	sar    eax,0x2
 52c:	69 c0 ab aa aa aa    	imul   eax,eax,0xaaaaaaab
 532:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax

}//pointers4
 535:	90                   	nop
 536:	c9                   	leave  
 537:	c3                   	ret    

00000538 <pointers5>:

//------------------------------------------------------------------------------

void pointers5( void ) {
 538:	55                   	push   ebp
 539:	89 e5                	mov    ebp,esp
 53b:	83 ec 20             	sub    esp,0x20
 53e:	e8 fc ff ff ff       	call   53f <pointers5+0x7>
 543:	05 01 00 00 00       	add    eax,0x1

   // see disassembly
   int arr[ 5 ] = { 10, 20, 30, 40, 50 };
 548:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
 54f:	c7 45 ec 14 00 00 00 	mov    DWORD PTR [ebp-0x14],0x14
 556:	c7 45 f0 1e 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1e
 55d:	c7 45 f4 28 00 00 00 	mov    DWORD PTR [ebp-0xc],0x28
 564:	c7 45 f8 32 00 00 00 	mov    DWORD PTR [ebp-0x8],0x32

   int *pi = NULL;
 56b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0

   pi = arr;
 572:	8d 45 e8             	lea    eax,[ebp-0x18]
 575:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax

   arr[ 0 ]   = 11;
 578:	c7 45 e8 0b 00 00 00 	mov    DWORD PTR [ebp-0x18],0xb
   *(arr + 0) = 12;
 57f:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
   pi[ 0 ]    = 13;
 586:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 589:	c7 00 0d 00 00 00    	mov    DWORD PTR [eax],0xd
   *(pi + 0)  = 14;
 58f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 592:	c7 00 0e 00 00 00    	mov    DWORD PTR [eax],0xe

   arr[ 1 ]   = 22;
 598:	c7 45 ec 16 00 00 00 	mov    DWORD PTR [ebp-0x14],0x16
   *(arr + 1) = 23;
 59f:	c7 45 ec 17 00 00 00 	mov    DWORD PTR [ebp-0x14],0x17
   pi[ 1 ]    = 24;
 5a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 5a9:	83 c0 04             	add    eax,0x4
 5ac:	c7 00 18 00 00 00    	mov    DWORD PTR [eax],0x18
   *(pi + 1)  = 25;
 5b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 5b5:	83 c0 04             	add    eax,0x4
 5b8:	c7 00 19 00 00 00    	mov    DWORD PTR [eax],0x19

   arr[ 2 ]   = 33;
 5be:	c7 45 f0 21 00 00 00 	mov    DWORD PTR [ebp-0x10],0x21
   *(arr + 2) = 34;
 5c5:	c7 45 f0 22 00 00 00 	mov    DWORD PTR [ebp-0x10],0x22
   pi[ 2 ]    = 35;
 5cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 5cf:	83 c0 08             	add    eax,0x8
 5d2:	c7 00 23 00 00 00    	mov    DWORD PTR [eax],0x23
   *(pi + 2)  = 36;
 5d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 5db:	83 c0 08             	add    eax,0x8
 5de:	c7 00 24 00 00 00    	mov    DWORD PTR [eax],0x24

   arr[ 3 ]   = 44;
 5e4:	c7 45 f4 2c 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2c
   *(arr + 3) = 45;
 5eb:	c7 45 f4 2d 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2d
   pi[ 3 ]    = 46;
 5f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 5f5:	83 c0 0c             	add    eax,0xc
 5f8:	c7 00 2e 00 00 00    	mov    DWORD PTR [eax],0x2e
   *(pi + 3)  = 47;
 5fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 601:	83 c0 0c             	add    eax,0xc
 604:	c7 00 2f 00 00 00    	mov    DWORD PTR [eax],0x2f

   arr[ 4 ]   = 55;
 60a:	c7 45 f8 37 00 00 00 	mov    DWORD PTR [ebp-0x8],0x37
   *(arr + 4) = 56;
 611:	c7 45 f8 38 00 00 00 	mov    DWORD PTR [ebp-0x8],0x38
   pi[ 4 ]    = 57;
 618:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 61b:	83 c0 10             	add    eax,0x10
 61e:	c7 00 39 00 00 00    	mov    DWORD PTR [eax],0x39
   *(pi + 4)  = 58;
 624:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 627:	83 c0 10             	add    eax,0x10
 62a:	c7 00 3a 00 00 00    	mov    DWORD PTR [eax],0x3a

}//pointers5
 630:	90                   	nop
 631:	c9                   	leave  
 632:	c3                   	ret    

00000633 <pointers6>:

//------------------------------------------------------------------------------

void pointers6( void ) {
 633:	55                   	push   ebp
 634:	89 e5                	mov    ebp,esp
 636:	53                   	push   ebx
 637:	83 ec 14             	sub    esp,0x14
 63a:	e8 fc ff ff ff       	call   63b <pointers6+0x8>
 63f:	81 c3 02 00 00 00    	add    ebx,0x2

   // see disassembly
   int *arr = NULL;
 645:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0

   arr = malloc( 5 * sizeof(int) );
 64c:	83 ec 0c             	sub    esp,0xc
 64f:	6a 14                	push   0x14
 651:	e8 fc ff ff ff       	call   652 <pointers6+0x1f>
 656:	83 c4 10             	add    esp,0x10
 659:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax

   arr[ 0 ]   = 11;
 65c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 65f:	c7 00 0b 00 00 00    	mov    DWORD PTR [eax],0xb
   *(arr + 0) = 12;
 665:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 668:	c7 00 0c 00 00 00    	mov    DWORD PTR [eax],0xc

   arr[ 1 ]   = 22;
 66e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 671:	83 c0 04             	add    eax,0x4
 674:	c7 00 16 00 00 00    	mov    DWORD PTR [eax],0x16
   *(arr + 1) = 23;
 67a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 67d:	83 c0 04             	add    eax,0x4
 680:	c7 00 17 00 00 00    	mov    DWORD PTR [eax],0x17

   arr[ 2 ]   = 33;
 686:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 689:	83 c0 08             	add    eax,0x8
 68c:	c7 00 21 00 00 00    	mov    DWORD PTR [eax],0x21
   *(arr + 2) = 34;
 692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 695:	83 c0 08             	add    eax,0x8
 698:	c7 00 22 00 00 00    	mov    DWORD PTR [eax],0x22

   arr[ 3 ]   = 44;
 69e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 6a1:	83 c0 0c             	add    eax,0xc
 6a4:	c7 00 2c 00 00 00    	mov    DWORD PTR [eax],0x2c
   *(arr + 3) = 45;
 6aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 6ad:	83 c0 0c             	add    eax,0xc
 6b0:	c7 00 2d 00 00 00    	mov    DWORD PTR [eax],0x2d

   arr[ 4 ]   = 55;
 6b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 6b9:	83 c0 10             	add    eax,0x10
 6bc:	c7 00 37 00 00 00    	mov    DWORD PTR [eax],0x37
   *(arr + 4) = 56;
 6c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 6c5:	83 c0 10             	add    eax,0x10
 6c8:	c7 00 38 00 00 00    	mov    DWORD PTR [eax],0x38

   free( arr );
 6ce:	83 ec 0c             	sub    esp,0xc
 6d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
 6d4:	e8 fc ff ff ff       	call   6d5 <pointers6+0xa2>
 6d9:	83 c4 10             	add    esp,0x10

}//pointers6
 6dc:	90                   	nop
 6dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
 6e0:	c9                   	leave  
 6e1:	c3                   	ret    

000006e2 <pointersConstantPointers>:

//------------------------------------------------------------------------------

void pointersConstantPointers( void ) {
 6e2:	55                   	push   ebp
 6e3:	89 e5                	mov    ebp,esp
 6e5:	83 ec 20             	sub    esp,0x20
 6e8:	e8 fc ff ff ff       	call   6e9 <pointersConstantPointers+0x7>
 6ed:	05 01 00 00 00       	add    eax,0x1

   int a = 0;
 6f2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   int b = 0;
 6f9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0

   // both same
   const int *pcA;
   int const *pcB;

   int *const cpi = &a;
 700:	8d 45 ec             	lea    eax,[ebp-0x14]
 703:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax

   const int *const cpci = &a;
 706:	8d 45 ec             	lea    eax,[ebp-0x14]
 709:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax

   pcA = &a;
 70c:	8d 45 ec             	lea    eax,[ebp-0x14]
 70f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   pcB = &b;
 712:	8d 45 e8             	lea    eax,[ebp-0x18]
 715:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   // *pcA = 3; // error
   // *pcB = 5; // error

   // cpi = &b; // error

}//pointersConstantPointers
 718:	90                   	nop
 719:	c9                   	leave  
 71a:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

00000000 <__x86.get_pc_thunk.ax>:
   0:	8b 04 24             	mov    eax,DWORD PTR [esp]
   3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

00000000 <__x86.get_pc_thunk.bx>:
   0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
   3:	c3                   	ret    
